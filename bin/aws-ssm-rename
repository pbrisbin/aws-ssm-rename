#!/usr/bin/env bash
set -euo pipefail

: "${AWS_SSM_RENAME_DEBUG:=0}"

usage() {
  cat <<'EOM'

Usage:
  aws-ssm-rename [options] <expression> <replacement> <parameter>...

Rename AWS SSM parameters.

Options:
 -v, --verbose          explain what is being done
 -n, --no-act           do not make any changes
 -a, --all              replace all ocurrences
 -o, --no-overwrite     don't overwrite existing parameters
 -i, --interactive      prompt before overwrite
 -g, --no-glob          don't match parameters as globs

 -h, --help             display this help
 -V, --version          display version


rename(1) features not implemented:
 -s, --symlink
 -l, --last

For more details see aws-ssm-rename(1).
EOM
}

debug() {
  if ((AWS_SSM_RENAME_DEBUG)); then
    echo "[DEBUG] $*" >&2
  fi
}

debug_aws() {
  debug "$@"
  aws "$@"
}

rename_parameter() {
  local original=$1 updated=$2 needs_overwrite=$3
  local existing_value existing_type put_options=()

  read -r existing_value existing_type < <(aws ssm get-parameter \
    --name "$original" \
    --query 'Parameter.[Value,Type]' \
    --output text)

  put_options=(
    --name "$updated"
    --value "$existing_value"
    --type "$existing_type"
  )

  if ((needs_overwrite)); then
    put_options+=(--overwrite)
  fi

  debug_aws ssm put-parameter "${put_options[@]}" >/dev/null

  # Double-check the new one exists before deleting. We do not trust the CLI
  if ! aws ssm get-parameter --name "$updated" &>/dev/null; then
    echo "put-parameter success, but $updated does not exist" >&2
    return 1
  fi

  debug_aws ssm delete-parameter --name "$original"
}

prompt() {
  local ans

  read -r -p "$*? (y/n/q)" ans

  case "$ans" in
    y | Y) return 0 ;;
    n | N) return 1 ;;
    q | Q) exit 0 ;;
    *)
      echo "Invalid choice" >&2
      prompt "$@"
      ;;
  esac
}

verbose=0
act=1
sed_options=
overwrite=1
interactive=0
glob=1

while (($#)); do
  case "$1" in
    -v | --verbose) verbose=1 ;;
    -n | --no-act) act=0 ;;
    -a | --all) sed_options=g ;;
    -o | --no-overwrite) overwrite=0 ;;
    -i | --interactive) interactive=1 ;;
    -g | --no-glob) glob=0 ;;
    -h | --help)
      usage
      exit 0
      ;;
    -V | --version)
      echo "aws-ssm-rename AWS_SSM_RENAME_VERSION"
      exit 0
      ;;
    --)
      shift
      break
      ;;
    -*)
      echo "Invalid option $1" >&2
      usage >&2
      exit 64
      ;;
    *) break ;;
  esac
  shift
done

if (($# < 3)); then
  echo "Invalid usage (requires at least 3 arguments, saw $#)" >&2
  usage >&2
  exit 64
fi

expression=$1
replacement=$2
shift 2

attempts=0
failures=0

if ((glob)); then
  parameters=()

  debug "glob is enabled, listing all parameters"
  while read -r parameter; do
    for pattern; do
      # shellcheck disable=SC2053
      if [[ "$parameter" == $pattern ]]; then
        debug "matched: $parameter"
        parameters+=("$parameter")
      fi
    done
  done < <(aws ssm get-parameters-by-path \
    --path / \
    --recursive \
    --query 'Parameters[].[Name]' \
    --output text || exit 64) # failure here is "unanticipated"
else
  debug "glob is disabled"
  parameters=("$@")
fi

for original in "${parameters[@]}"; do
  # by default only the last component of the path is updated, unless expression
  # or replacement contains a slash, then the whole path is updated.
  if echo "$expression$replacement" | grep -Fq '/'; then
    debug "expression or replacement contains a slash, updating whole path"
    # shellcheck disable=SC2001
    updated=$(echo "$original" | sed 's|'"$expression"'|'"$replacement"'|'"$sed_options")
  else
    base=$(dirname "$original")
    name=$(basename "$original")
    # shellcheck disable=SC2001
    updated_name=$(echo "$name" | sed 's|'"$expression"'|'"$replacement"'|'"$sed_options")
    updated=$base/$updated_name
  fi

  if [[ "$updated" == "$original" ]]; then
    debug "skipping: rename had no effect"
    continue
  fi

  debug "rename: $original => $updated"

  ((attempts++)) || true

  if ((verbose)); then
    printf "\`%s' -> \`%s'\n" "$original" "$updated"
  fi

  if ((!act)); then
    debug "skipping: --no-act"
    continue
  fi

  needs_overwrite=0

  if aws ssm get-parameter --name "$updated" &>/dev/null; then
    debug "parameter exists"

    if ((!overwrite)); then
      if ((!interactive)); then
        debug "skipping: --no-overwrite, no --interactive"
        echo "Not overwriting existing parameter $updated" >&2
        continue
      fi

      if ! prompt_yes "Overwrite $updated"; then
        debug "skipping: interactive answered no"
        echo "Not overwriting existing parameter $updated" >&2
        continue
      fi
    fi

    debug "proceeding with overwrite"
    needs_overwrite=1
  fi

  if ! rename_parameter "$original" "$updated" "$needs_overwrite"; then
    debug "rename failed"
    ((failures++)) || true
  fi
done

if ((!attempts)); then
  debug "nothing was renamed"
  exit 4
elif ((failures == attempts)); then
  debug "all renames failed"
  exit 1
elif ((failures)); then
  debug "some renames failed"
  exit 2 # some renames failed
fi

debug "success"
